package uavcam::dispositivos
public
	with uavcam::tipo_de_dados;

	with Electricity_Properties;
	
	with types;
  	with buses::misc;
  	with buses::USB;

---------------------
--  Unidade Móvel Inercial - MPU6050
---------------------
	device IMU_generic
		features
			DOF6: out data port uavcam::tipo_de_dados::Six_Axis.impl;
		properties
			--Initialize_Entrypoint => classifier (devices::gps_lea4h::Initialize);
			Electricity_Properties::Idle_Current => 0.065mA;
			Electricity_Properties::Run_Current => 39.0mA; --  at 3.0 V 
			Electricity_Properties::Peak_Current => 100.0mA; -- to measure
			Electricity_Properties::Core_Voltage => 3.3V; -- 2.7 V - 3.3 power supply
			Electricity_Properties::Acquisition_Time => 3500ms; -- re-acquisition, hot start < 3.5s, cold start 34s 
			Electricity_Properties::Peak_Time => 1ms;
			Electricity_Properties::VIH_min => 2.0V; --  5V tolerant inputs
			Electricity_Properties::VIL_max => 1.0V;
			Electricity_Properties::VOH_min => 3.2V;
			Electricity_Properties::VOL_max => 0.4V;
					-- level shifter added to connect to STM32F405
			Electricity_Properties::Level_Shifter_VIH_min => 1.2V;
			Electricity_Properties::Level_Shifter_VIL_max => 0.5V;
			Electricity_Properties::Level_Shifter_VOH_min => 1.7V;
			Electricity_Properties::Level_Shifter_VOL_max => 0.1V;
			Electricity_Properties::Device_Type => Slave;
		annex EMV2 {**
			use types ErrorLibrary;
			use behavior ErrorLibrary::FailStop;
			
			error propagations
				DOF6: out propagation {ItemOmission, OutOfRange};
			flows
				ef1: error source DOF6 {ItemOmission, OutOfRange};
			end propagations;
			
			properties
				EMV2::Hazards => ([crossreference => "N/A";
						failure => "Device:ItemOmission";
						phases => ("in flight");
						description => "IMU dont send data";
						comment => "The sensor does not send any data, might be an error if all sensores does not sent data";
					]) applies to DOF6.ItemOmission;
				EMV2::Hazards => ([crossreference => "N/A";
						failure => "Device:OutOfRange";
						phases => ("in flight");
						description => "IMU starts to send an erroneous value range";
						comment => "The sensor does not send any data in value range, might be an error if all sensors does not send a consistent value";
					]) applies to DOF6.OutOfRange;
		**};
	end IMU_generic;

---------------------
--  Unidade Móvel Inercial - MPU6050
---------------------
	device MPU6050 extends IMU_generic
		features
			DOF: out data port uavcam::tipo_de_dados::Six_Axis.impl;
		flows
			f2: flow source DOF {latency => 100us .. 300us;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 10ms;
	end MPU6050;

	device implementation MPU6050.impl
		
	end MPU6050.impl;

-------------------	
--     Camera    --
-------------------

	device camera
		features
			Serial_Wire: requires bus access buses::USB::USB.impl;
    		Supply: requires bus access buses::misc::V5_Bus.impl;
    		proc_evt: out event port;
	end camera;

	device implementation CAMERA.impl
  		properties
		    Initialize_Entrypoint => classifier (Initialize);
		    Electricity_Properties::Idle_Current => 1.0 mA;  -- no data
		    Electricity_Properties::Run_Current =>  50.0 mA; --  no data
		    Electricity_Properties::Peak_Current => 100.0 mA; -- to measure
		    Electricity_Properties::Core_Voltage => 5.0 V; -- 4.75 .. 5.25 V  standard USB range
		    Electricity_Properties::Acquisition_Time => 1 sec; -- no data
		    Electricity_Properties::Peak_Time => 1 ms;
		    Electricity_Properties::VIH_min => 2.0 V;
		    Electricity_Properties::VIL_max => 1.0 V;
		    Electricity_Properties::VOH_min => 3.2 V;
		    Electricity_Properties::VOL_max => 0.4 V;
		    Electricity_Properties::Device_Type => Slave;
  	end CAMERA.impl;

	  abstract CAMERA_Driver
	  end CAMERA_Driver;
	
	  abstract implementation CAMERA_Driver.impl
	  end CAMERA_Driver.impl;

  -----------------
  -- SUBPROGRAMS --
  -----------------

  subprogram Initialize
  properties
    Source_Name => "initialize";
    Source_Text => ("camera_usb.c");
    Source_Language => (C);
  end Initialize;

  subprogram Read_Acquisition
  features
    CAMERA_meas: out parameter types::CAMERA_meas_dat;
  properties
    Source_Name => "read_acquisition";
    Source_Text => ("camera_usb.c");
    Source_Language => (C);
  end Read_Acquisition;

  subprogram Start_Acquisition
  properties
    Source_Name => "start_acquisition";
    Source_Text => ("camera_usb.c");
    Source_Language => (C);
  end Start_Acquisition;



-----------
-- Board --
-----------

	device board
		
	end board;
	
	device implementation board.impl
		
	end board.impl;

--------------------	
-- UAV controller --
--------------------

	device UAV_controller
		features
			Supply : requires bus access buses::Misc::V5_bus.impl;
		
	end UAV_controller;
	
	device implementation UAV_controller.impl
		
	end UAV_controller.impl;
	
----------------------------	
-- Radio (Remote control) --
----------------------------
	device radio
  		features
			ch1: out event port;
			ch2: out event port;
			ch3: out event port;
			ch4: in out event port;
			ch5: out event port;
			ch6: in out event port;
  	--features
    --emission_data 	: in data port pathfinder_software::emission_data;
    --reception_data 	: out data port pathfinder_software::reception_data;
    --req_access_vme 	: requires bus access VME;

	end radio;	

	device implementation radio.impl
		
	end radio.impl;
	
-------------------	
--  Servo Motors --
-------------------

	device Servo_Motor_Roll
		features
			PWM_Serv_Roll: in data port uavcam::tipo_de_dados::PWM_Rate;
		flows
			f0: flow sink PWM_Serv_Roll {latency => 200us .. 500us;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 20ms; -- depende da tecnologia do ESC
		annex EMV2 {**
			use types ErrorLibrary;
			use behavior ErrorLibrary::FailStop;
			
			error propagations
				PWM_Serv_Roll: in propagation {ItemOmission, OutOfRange};
			flows
				ef0: error sink PWM_Serv_Roll {ItemOmission, OutOfRange};
			end propagations;
			
			component error behavior
			events
				Reset: recover event;
			transitions
				t0: Operational -[PWM_Serv_Roll {ItemOmission}]-> FailStop;
				t1: Operational -[PWM_Serv_Roll {OutOfRange}]-> FailStop;
				t2: FailStop -[Reset]-> Operational;
			end component;
		**};
	end Servo_Motor_Roll;
	
	
	device implementation Servo_Motor_Roll.impl
		
	end Servo_Motor_Roll.impl;
	
	device Servo_Motor_Pitch
		features
			PWM_Serv_Pitch: in data port uavcam::tipo_de_dados::PWM_Rate;
		flows
			f0: flow sink PWM_Serv_Pitch {latency => 200us .. 500us;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 20ms; -- depende da tecnologia do ESC
		annex EMV2 {**
			use types ErrorLibrary;
			use behavior ErrorLibrary::FailStop;
			
			error propagations
				PWM_Serv_Pitch: in propagation {ItemOmission, OutOfRange};
			flows
				ef0: error sink PWM_Serv_Pitch {ItemOmission, OutOfRange};
			end propagations;
			
			component error behavior
			events
				Reset: recover event;
			transitions
				t0: Operational -[PWM_Serv_Pitch {ItemOmission}]-> FailStop;
				t1: Operational -[PWM_Serv_Pitch {OutOfRange}]-> FailStop;
				t2: FailStop -[Reset]-> Operational;
			end component;
		**};
	end Servo_Motor_Pitch;	
	
	device implementation Servo_Motor_Pitch.impl
		
	end Servo_Motor_Pitch.impl;
	
	
	device Servo_Motor_Yaw 
		features
			PWM_Serv_Yaw: in data port uavcam::tipo_de_dados::PWM_Rate;
		flows
			f0: flow sink PWM_Serv_Yaw {latency => 200us .. 500us;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 20ms; -- depende da tecnologia do ESC
		annex EMV2 {**
			use types ErrorLibrary;
			use behavior ErrorLibrary::FailStop;
			
			error propagations
				PWM_Serv_Yaw: in propagation {ItemOmission, OutOfRange};
			flows
				ef0: error sink PWM_Serv_Yaw {ItemOmission, OutOfRange};
			end propagations;
			
			component error behavior
			events
				Reset: recover event;
			transitions
				t0: Operational -[PWM_Serv_Yaw {ItemOmission}]-> FailStop;
				t1: Operational -[PWM_Serv_Yaw {OutOfRange}]-> FailStop;
				t2: FailStop -[Reset]-> Operational;
			end component;
		**};
	end Servo_Motor_Yaw;	
	
	
	device implementation Servo_Motor_Yaw.impl
		
	end Servo_Motor_Yaw.impl;
	
end uavcam::dispositivos;