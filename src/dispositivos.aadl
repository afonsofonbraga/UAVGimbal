package uavcam::dispositivos
public
	
	--with uavcam;
	with uavcam::tipo_de_dados;

	with Electricity_Properties;

	with types;

	--with buses::misc;

	with buses::USB;
	
	with buses::I2C;
	
	with buses::pwm;

	with Buses::UART;
	
	with buses::SPI;
	
	

---------------------
--  Unidade M�vel Inercial - MPU6050
---------------------
	device IMU_generic
		features
			DOF6: out data port uavcam::tipo_de_dados::Six_Axis.impl;
			i2c_bus: requires bus access Buses::I2c::I2C;
		properties
				--Initialize_Entrypoint => classifier (devices::gps_lea4h::Initialize);
			Electricity_Properties::Idle_Current => 0.065mA;
			Electricity_Properties::Run_Current => 39.0mA; --  at 3.0 V 
			Electricity_Properties::Peak_Current => 100.0mA; -- to measure
			Electricity_Properties::Core_Voltage => 3.3V; -- 2.7 V - 3.3 power supply
			Electricity_Properties::Acquisition_Time => 3500ms; -- re-acquisition, hot start < 3.5s, cold start 34s 
			Electricity_Properties::Peak_Time => 1ms;
			Electricity_Properties::VIH_min => 2.0V; --  5V tolerant inputs
			Electricity_Properties::VIL_max => 1.0V;
			Electricity_Properties::VOH_min => 3.2V;
			Electricity_Properties::VOL_max => 0.4V;
					-- level shifter added to connect to STM32F405
			Electricity_Properties::Level_Shifter_VIH_min => 1.2V;
			Electricity_Properties::Level_Shifter_VIL_max => 0.5V;
			Electricity_Properties::Level_Shifter_VOH_min => 1.7V;
			Electricity_Properties::Level_Shifter_VOL_max => 0.1V;
			Electricity_Properties::Device_Type => Slave;
		annex EMV2 {**
			use types ErrorLibrary;
			use behavior ErrorLibrary::FailStop;
			
			error propagations
				DOF6: out propagation {ItemOmission, OutOfRange};
			flows
				ef1: error source DOF6 {ItemOmission, OutOfRange};
			end propagations;
			
			properties
				EMV2::Hazards => ([crossreference => "N/A";
						failure => "Device:ItemOmission";
						phases => ("in flight");
						description => "IMU dont send data";
						comment => "The sensor does not send any data, might be an error if all sensores does not sent data";
					]) applies to DOF6.ItemOmission;
				EMV2::Hazards => ([crossreference => "N/A";
						failure => "Device:OutOfRange";
						phases => ("in flight");
						description => "IMU starts to send an erroneous value range";
						comment => "The sensor does not send any data in value range, might be an error if all sensors does not send a consistent value";
					]) applies to DOF6.OutOfRange;
		**};
	end IMU_generic;

---------------------
--  Unidade Movel Inercial - MPU6050
---------------------
	device MPU6050 extends IMU_generic
		flows
			f_imu: flow source DOF6 {latency => 100us .. 300us;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 10ms;
			Compute_Execution_Time => 6 ms .. 8 ms;
	end MPU6050;

	device implementation MPU6050.impl
	end MPU6050.impl;

------------
-- CAMERA --
------------
	device camera
		features
			Cam_Serial_Wire: requires bus access buses::USB::USB.impl;
			
			cam_stream_out: out data port uavcam::tipo_de_dados::Camera_Frame.impl;
			--Supply: requires bus access buses::misc::V5_Bus.impl;
			--proc_evt: out event port;
		flows
			f_video: flow source cam_stream_out {latency => 100us .. 300us;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 200 ms;
			Compute_Execution_Time => 20 ms .. 50 ms;
	end camera;

	device implementation CAMERA.impl
		properties
			Initialize_Entrypoint => classifier (Initialize);
			Electricity_Properties::Idle_Current => 1.0mA; -- no data
			Electricity_Properties::Run_Current => 50.0mA; --  no data
			Electricity_Properties::Peak_Current => 100.0mA; -- to measure
			Electricity_Properties::Core_Voltage => 5.0V; -- 4.75 .. 5.25 V  standard USB range
			Electricity_Properties::Acquisition_Time => 1 sec; -- no data
			Electricity_Properties::Peak_Time => 1ms;
			Electricity_Properties::VIH_min => 2.0V;
			Electricity_Properties::VIL_max => 1.0V;
			Electricity_Properties::VOH_min => 3.2V;
			Electricity_Properties::VOL_max => 0.4V;
			Electricity_Properties::Device_Type => Slave;
	end CAMERA.impl;

	abstract CAMERA_Driver
	end CAMERA_Driver;

	abstract implementation CAMERA_Driver.impl
	end CAMERA_Driver.impl;

		-----------------
		-- SUBPROGRAMS --
		-----------------
	subprogram Initialize
		properties
			Source_Name => "initialize";
			Source_Text => ("camera_usb.c");
			Source_Language => (C);
	end Initialize;

	subprogram Read_Acquisition
		features
			CAMERA_meas: out parameter types::CAMERA_meas_dat;
		properties
			Source_Name => "read_acquisition";
			Source_Text => ("camera_usb.c");
			Source_Language => (C);
	end Read_Acquisition;

	subprogram Start_Acquisition
		properties
			Source_Name => "start_acquisition";
			Source_Text => ("camera_usb.c");
			Source_Language => (C);
	end Start_Acquisition;

-------------
-- SD Card --
-------------
	device SD_card
		features
			store_data_in: in data port uavcam::tipo_de_dados::Store_Data.impl;
			SD_card_Serial_Wire: requires bus access Buses::SPI::SPI;
		flows -- Valores arbitr�rios de lat�ncia. Verificar valroes reais.
			f_save: flow sink store_data_in {latency => 100us .. 300us;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 10ms; -- Igualar ao per�odo da thread de processamento de imagem
	end SD_card;

	device implementation SD_card.impl
	end SD_card.impl;

--------------------	
-- UAV controller --
--------------------
	device UAV
		features
			--Supply: requires bus access buses::Misc::V5_bus.impl;
			
			--Serial_Wire: requires bus access Buses::UART::UART.impl;
			
			UAV_Serial_Wire: requires bus access Buses::UART::UART;
			
			radio_controller: out data port uavcam::tipo_de_dados::Target_Position.impl;
			cam_low_res: in data port uavcam::tipo_de_dados::Camera_Low_Res.impl;
			sys_status: in data port uavcam::tipo_de_dados::System_Status.impl;
			
			--bus_access: requires bus access uavcam::Connection_Bus;
			
		flows -- Valores arbitr�rios de lat�ncia. Verificar valroes reais.
			f1_radio: flow source radio_controller {latency => 100us .. 300us;};
			f2_cam: flow sink cam_low_res {latency => 100us .. 300us;};
			f3_sys_status: flow sink sys_status {latency => 100us .. 300us;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 10ms;
	end UAV;

	device implementation UAV.impl
	end UAV.impl;


-------------------	
--  Servo Motors --
-------------------
	device Servo_Motor
		features
			PWM_Serv: in data port uavcam::tipo_de_dados::PWM_Rate;
			pwm_bus: requires bus access buses::pwm::pwm;
		flows
			f0: flow sink PWM_Serv {latency => 200us .. 500us;};  -- num dos exemplos, o servo nao tinha flow. existe tbm flow path
		properties
			Dispatch_Protocol => Periodic;
			Period => 20ms; -- depende da tecnologia do ESC
		annex EMV2 {**
			use types ErrorLibrary;
			use behavior ErrorLibrary::FailStop;
			
			error propagations
				PWM_Serv: in propagation {ItemOmission, OutOfRange};
			flows
				ef0: error sink PWM_Serv {ItemOmission, OutOfRange};
			end propagations;
			
			component error behavior
			events
				Reset: recover event;
			transitions
				t0: Operational -[PWM_Serv {ItemOmission}]-> FailStop;
				t1: Operational -[PWM_Serv {OutOfRange}]-> FailStop;
				t2: FailStop -[Reset]-> Operational;
			end component;
		**};
	end Servo_Motor;

	device implementation Servo_Motor.impl
	end Servo_Motor.impl;
	
end uavcam::dispositivos;